Homework 1.03 - Path Finding
By: Edwin O. Martinez Velazquez

1.01:
Dungeon Generations randomly generates a dungeon in a 80*21 grid.
It will randomly generate between 5 to 7 rooms.
The rooms will be of a random size between 3x2 to 6x5. This is due to stability
It connects the rooms using Bresenham's Line Algorithm, making a line to the closest room, then looping the first room connected with the last one to force cycles.
Rooms, Rocks, and Corridors are their own structs.
The dungeon is a 80x21 matrix of a tagged union, containing the tag of type and an instance of room, rock, or corridor.

1.02:
Program now has --load & --save switch.
--load switch has optional parameter to specify which file to load from
--save switch has optional parameter to specify which file to save to
If no parameter for --load it will default to "dungeon". File must be a string, e.g., must contain at least 1 character other than a digit. 
If no parameter for --save it will default to "dungeon", unless --load switch has a specified file. In which case it will save to the file loaded from.
--load and --save can be used together, in which case it will load the file and then save it.
--load cannot be used with a seed. A digit only parameter after --load will be read as a seed and fail
--save can be used with a seed or random seed (no input argument)
File must be in the appropiate format, otherwise program file indicate it is not.
Saving file will indicate if there was any errors in the writing process.
Order of switches doesn't matter.

1.03:
Program now calculates distances from player.
A player is set randomly with the seed used for a random dungeon. For loaded dungeons, the player will be placed randomly.
Player is placed in any floor space (room or corridor or cell with a hardness of 0).
The program will generate the first dungeon as normal. Then it will graph the dungeon floors and perform Dijkstra's algorithm. This results in a cost map for non tunneler monsters.
The program will then generate a third map by graphing the entire dungeon and running Dijkstra algorithm on that. The resulting map is the cost for tunneler monsters.
Cost to each cell start from 0 (player's position) to 9, then a to z, and A to Z. If a cost is larger than Z (61) then the cell will be rendered normally.
The weight of each cell is determined by hardness. A hardness of 0 (floor) is 1. 
Cells with hardness of 1 to 84 also have a weight of 1, 85 to 170 have a weight of 2, and 171 to 254 have a weight of 3. Cells of 255 hardness have weights of 428400 (255 hardness x 1680 cells).
Tunnelling effort is not taken into account in this version as it is not required in the assignment specificaitons.
Borders are now draw with ~

1.04:
Game now has player and monsters.
Player is a drunken idiot. He moves randomly.
There are 16 types of monsters, combination of any 4 powers: intelligence, telepath, tunneler, and erratic. These powers correspond from least significant bit to most significant bit.
The monster is represented by the hexadecimal combinations of its powers, from 0 (no behaviour other than sight aggro) to f (all powers).
Intelligent monsters remember the last place they saw the player and move via shortest path to the known player position, straight line otherwise.
Telepaths always knows the player's location.
Tunnellers can go through rock, but have to chisel away 85 density points per turn
Erratic monsters have a 50% chance of just moving randomly instead.
Turns are determined via 100/speed with speed been a number between 5 and 20. This is queued through a priority queue.
New switch --nummon <int> is now available. This sets the number of monsters to spawn. Monsters are chosen at random and placed randomly, but following their rules. (non tunnelers will
only spawn inside the dungeon floor).

1.05:
Game now draws with curses in the scr window. It now also take key inputs to control the game:
Move up - w, k, 8, numpad 8
Move down - s, j, 2, numpad 2
Move left - a, h, 4, numpad 4
Move right - d, l, 6, numpad 6
Rest - Spacebar, center arrow, numpad 5
Go downstairs - >
Go upstairs - <
Display monster list - m
Scroll up through monster list - up arrow
Scroll down through monster list - down arrow
Exit monster list - esc
Save and exit game - S (upper case S, not to be confused with lower case s for move down)
The monster list is only scrollable if there are more monster than fits the screen.
A new dungeon is randomly generated every time you go up or down a stair. First dungeon is level 0 and has no upstairs. Every time you gown down a stair you reach another level.
To win you just clear all monsters in the current map. 
Player can no longer tunnel. 
Game is now colorful. Player is cyan, monsters are red, down stairs are black on green, up stairs are black on magenta, rooms are black on white, corridors are black on yellow.
Monster list is black on white, win screen is everything black on white, lose screen is everything black on red, save and exit is white on black.

1.06:
In this version monster and player have been converted from struct to c++ class. Character was also changed from struct to class and is a parent to both monster and player. 
CharacterController is a .cpp file. All references to monster, player, and character are wrapped in C functions for C++ interfacing in C. 
Fog of war has been implemented. The player can only see within a 3x3 grid. S/He will remember the dungeon as the player saw it and not as it changes.
The player can tell if a cell is within the visible 3x3 grid if the cell has colors, i.e., not white on black. The player can only see monsters within the grid as well.
NOTE: Without --nummon you automatically win the game. For some TAs the win/lose screen does not appear. Valgrind takes FOREVER and the invalid reads are index out of bounds error that the code handles safely.

Usage using time as seed: ./dungeonGenerator

Usage using int as seed: ./dungeonGenerator <number>

Usage for load: ./dungeonGenerator --load <optional file name>

Usage for save: ./dungeonGenerator --save <optional file name> <optional seed>

Usage for load/save: ./dungeonGenerator --load <optional file name> --save <optional file name>

Usage for spawning monsters: ./dungeonGenerator --nummon <int>